
package org.usfirst.frc.team5684.robot;
//import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SampleRobot;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.Victor;
//import edu.wpi.first.wpilibj.interfaces.Gyro;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * This is a demo program showing the use of the RobotDrive class.
 * The SampleRobot class is the base of a robot application that will automatically call your
 * Autonomous and OperatorControl methods at the right time as controlled by the switches on
 * the driver station or the field controls.
 *
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the SampleRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 *
 * WARNING: While it may look like a good choice to use for your code if you're inexperienced,
 * don't. Unless you know what you are doing, complex code will be much more difficult under
 * this system. Use IterativeRobot or Command-Based instead if you're new.
 */

public class Robot extends SampleRobot {
    RobotDrive myRobot;
    Victor collector;
    Spark arm;
    CameraServer camera;
    Joystick stick;
    final String defaultAuto = "Default";
    final String customAuto = "My Auto";
    SendableChooser chooser;
    boolean pully = false;
    boolean armDrive = false;
    double pullySpeed = 0.5;
    
   /* public class GyroSample extends SampleRobot {

    	    private RobotDrive myRobot; // robot drive system
    	    private Gyro myGyro;

    	    double Kp = 0.03;

    	    public GyroSample() {
    	        myGyro = new AnalogGyro(1);             // Gyro on Analog Channel 1
    	        myRobot = new RobotDrive(0,1);  // Drive train jaguars on PWM 1 and 2
    	        myRobot.setExpiration(0.1);
    	    }
*/
    public Robot() {
        myRobot = new RobotDrive(0, 1);
        myRobot.setExpiration(0.1);
        stick = new Joystick(0);
        collector = new Victor(2); 
        arm = new Spark (3);
    }
    
    public void robotInit() {
        chooser = new SendableChooser();
        chooser.addDefault("Default Auto", defaultAuto);
        chooser.addObject("My Auto", customAuto);
        SmartDashboard.putData("Auto modes", chooser);
        camera = CameraServer.getInstance();
        camera.setQuality(85);
//        camera.startAutomaticCapture(usb_camera);
        camera.startAutomaticCapture("cam1");
    }

	/**
	 * This autonomous (along with the chooser code above) shows how to select between different autonomous modes
	 * using the dashboard. The sendable chooser code works with the Java SmartDashboard. If you prefer the LabVIEW
	 * Dashboard, remove all of the chooser code and uncomment the getString line to get the auto name from the text box
	 * below the Gyro
	 *
	 * You can add additional auto modes by adding additional comparisons to the if-else structure below with additional strings.
	 * If using the SendableChooser make sure to add them to the chooser code above as well.
	 */
    public void autonomous() {
       // myGyro.reset();
        while (isAutonomous()) {
      //      double angle = myGyro.getAngle(); // get current heading
           /* myRobot.drive(-1.0, -angle*Kp); // drive towards heading 0
            Timer.delay(0.004);
            System.out.println("current position..." + myGyro.getAngle());
            */
            myRobot.setSafetyEnabled(false);
            myRobot.drive(0.5, -0.0015);	//spin at half speed
         //   Timer.delay(2.0);		//    for 2 seconds
         //   myRobot.drive(0.0, 0.0);	// stop robot
        }
        myRobot.drive(0.0, 0.0);
    }


    /**
     * Runs the motors with arcade steering.
     */
    public void operatorControl() {
        myRobot.setSafetyEnabled(true);
        while (isOperatorControl() && isEnabled()) {
            pully = false;
            armDrive = false;
            myRobot.arcadeDrive(stick.getRawAxis(5), -(stick.getRawAxis(4))); // drive with arcade style (use right stick)
            Timer.delay(0.005);		// wait for a motor update time
            
            if(stick.getRawAxis(2) > 0)	//Left trigger
            {
            	System.out.println("Trigger pressed, 2 = " + stick.getRawAxis(2));
            	arm.setInverted(true);
            	arm.set(stick.getRawAxis(2));
            	armDrive = true;
            	

            }
            if(stick.getRawAxis(3) > 0)	//Right trigger
            {
            	System.out.println("Trigger pressed, 3 = " + stick.getRawAxis(3));
            	arm.setInverted(false);
            	arm.set(stick.getRawAxis(3));
            	armDrive = true;
            	
            }
           /* 
        	System.out.println("Trigger pressed, 3 = " + stick.getRawAxis(3));
        	System.out.println("Trigger pressed, 2 = " + stick.getRawAxis(2));
        	*/
            if(armDrive == false)
            {
            	arm.set(0);
            }
            if(stick.getRawAxis(0) > 0 || stick.getRawAxis(1) > 0) //Left joystick
            {
            	pullySpeed = stick.getRawAxis(0) - stick.getRawAxis(1);
            	if(pullySpeed < 0.1)	//Left trigger thinks it's being hit when it's not, sending small value so this gets around it
            	{
            		pullySpeed = 0.5;
            	}
            }
            if(stick.getRawButton(5)){	//Left bumper
            	System.out.println("left button pressed " + pullySpeed);
            	collector.setInverted(true);
            	collector.set(pullySpeed);
            	pully = true;
            	
            }
            if(stick.getRawButton(6)){	//Right bumper
            	System.out.println("right button pressed " + pullySpeed);
            	collector.setInverted(false);
            	collector.set(pullySpeed);
            	pully = true;
            }

            if(pully == false)
            {
            	collector.set(0);
            	pullySpeed = 0.5;
            }

            if(stick.getRawButton(7))	//back button
            {
            	
            }
            if(stick.getRawButton(8))	//start button
            {
            	
            }
            if(stick.getRawButton(1))	//A button
            {
            	
            }
            if(stick.getRawButton(2))	//B button
            {
            	
            }
            if(stick.getRawButton(3))	//X button
            {
            	
            }
            if(stick.getRawButton(4))	//Y button
            {           	
            	//test to see arm goes down (for autonomous mode)
            	Timer armTimer = new Timer();
            	armTimer.start();   	
            	
               	while (!(armTimer.hasPeriodPassed(4))) //number passed in is in seconds        	
               	{
               		arm.setInverted(false);
	            	arm.set(stick.getRawAxis(4));
	            	armDrive = true;
            	}
            }
        } 
          
    }

    /**
     * Runs during test mode
     */
    public void test() {
    	        camera = CameraServer.getInstance();
    	        camera.setQuality(85);
    	        camera.getQuality();
    	        //   ggfgffjhfee     camera.startAutomaticCapture(usb_camera);
    	        camera.startAutomaticCapture("cam1");
    	        
    	    
    	    }
    }

